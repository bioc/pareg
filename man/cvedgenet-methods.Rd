% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netreg.R
\docType{methods}
\name{cv.edgenet}
\alias{cv.edgenet}
\alias{cv.edgenet,matrix,numeric-method}
\alias{cv.edgenet,matrix,matrix-method}
\title{Find the optimal shrinkage parameters for edgenet}
\usage{
cv.edgenet(
  X,
  Y,
  G.X = NULL,
  G.Y = NULL,
  lambda = NA_real_,
  psigx = NA_real_,
  psigy = NA_real_,
  thresh = 1e-05,
  maxit = 1e+05,
  learning.rate = 0.01,
  family = gaussian,
  optim.thresh = 0.01,
  optim.maxit = 100,
  lambda_range = seq(0, 2, length.out = 10),
  psigx_range = seq(0, 500, length.out = 10),
  psigy_range = seq(0, 500, length.out = 10),
  nfolds = 2
)

\S4method{cv.edgenet}{matrix,numeric}(
  X,
  Y,
  G.X = NULL,
  G.Y = NULL,
  lambda = NA_real_,
  psigx = NA_real_,
  psigy = NA_real_,
  thresh = 1e-05,
  maxit = 1e+05,
  learning.rate = 0.01,
  family = gaussian,
  optim.thresh = 0.01,
  optim.maxit = 100,
  lambda_range = seq(0, 2, length.out = 10),
  psigx_range = seq(0, 500, length.out = 10),
  psigy_range = seq(0, 500, length.out = 10),
  nfolds = 2
)

\S4method{cv.edgenet}{matrix,matrix}(
  X,
  Y,
  G.X = NULL,
  G.Y = NULL,
  lambda = NA_real_,
  psigx = NA_real_,
  psigy = NA_real_,
  thresh = 1e-05,
  maxit = 1e+05,
  learning.rate = 0.01,
  family = gaussian,
  optim.thresh = 0.01,
  optim.maxit = 100,
  lambda_range = seq(0, 2, length.out = 10),
  psigx_range = seq(0, 500, length.out = 10),
  psigy_range = seq(0, 500, length.out = 10),
  nfolds = 2
)
}
\arguments{
\item{X}{input matrix, of dimension (\code{n} x \code{p})
where \code{n} is the number of observations and \code{p} is the number
of covariables. Each row is an observation vector.}

\item{Y}{output matrix, of dimension (\code{n} x \code{q})
where \code{n} is the number of observations and \code{q} is the number
of response variables Each row is an observation vector.}

\item{G.X}{non-negativ affinity matrix for \code{X}, of dimensions
(\code{p} x \code{p}) where \code{p} is the number of covariables.
 Providing a graph \code{G.X} will optimize the regularization
 parameter \code{psi.gx}. If this is not desired just set \code{G.X} to
 \code{NULL}.}

\item{G.Y}{non-negativ affinity matrix for \code{Y}, of dimensions
(\code{q} x \code{q}) where \code{q} is the number of responses \code{Y}.
Providing a graph \code{G.Y} will optimize the regularization
parameter \code{psi.gy}. If this is not desired just set \code{G.Y} to
\code{NULL}.}

\item{lambda}{\code{numerical} shrinkage parameter for LASSO. Per default
this parameter is set to \code{NA_real_}
which means that \code{lambda} is going to be estimated
using cross-validation. If any \code{numerical} value for \code{lambda}
is set, estimation of the optimal parameter will \emph{not} be conducted.}

\item{psigx}{\code{numerical} shrinkage parameter for graph-regularization
of \code{G.X}. Per default this parameter is set to
\code{NA_real_} which means that \code{psigx} is going to be estimated
in the cross-validation. If any \code{numerical} value for \code{psigx} is
set, estimation of the optimal parameter will \emph{not} be conducted.}

\item{psigy}{\code{numerical} shrinkage parameter for graph-regularization
of \code{G.Y}. Per default this parameter is
set to \code{NA_real_} which means that \code{psigy} is
going to be estimated
in the cross-validation. If any \code{numerical} value for \code{psigy} is
set, estimation of the optimal parameter will \emph{not} be conducted.}

\item{thresh}{\code{numerical} threshold for the optimizer}

\item{maxit}{maximum number of iterations for the optimizer
(\code{integer})}

\item{learning.rate}{step size for Adam optimizer (\code{numerical})}

\item{family}{family of response, e.g. \emph{gaussian} or \emph{binomial}}

\item{optim.thresh}{\code{numerical} threshold criterion for the
optimization to stop.  Usually 1e-3 is a good choice.}

\item{optim.maxit}{the maximum number of iterations for the optimization
(\code{integer}). Usually 1e4 is a good choice.}

\item{lambda_range}{range of lambda to use in CV grid.}

\item{psigx_range}{range of psigx to use in CV grid.}

\item{psigy_range}{range of psigy to use in CV grid.}

\item{nfolds}{the number of folds to be used - default is 10}
}
\value{
An object of class \code{cv.edgenet}
\item{parameters }{ the estimated, optimal regularization parameters}
\item{lambda }{ optimal estimated value for regularization parameter lambda
  (or, if provided as argument, the value of the parameter)}
\item{psigx }{ optimal estimated value for regularization parameter psigx
  (or, if provided as argument, the value of the parameter)}
\item{psigy }{ optimal estimated value for regularization parameter psigy
  (or, if provided as argument, the value of the parameter)}
\item{estimated.parameters }{ names of parameters that were estimated}
\item{family }{ family used for estimated}
\item{fit }{ an \code{edgenet} object fitted with the optimal, estimated
 paramters}
\item{call }{ the call that produced the object}
}
\description{
Finds the optimal regulariztion parameters
 using cross-validation for edgenet. We use the BOBYQA algorithm to
 find the optimial regularization parameters in a cross-validation framework.
}
\examples{
X <- matrix(rnorm(100 * 10), 100, 10)
b <- matrix(rnorm(100), 10)
G.X <- abs(rWishart(1, 10, diag(10))[, , 1])
G.Y <- abs(rWishart(1, 10, diag(10))[, , 1])
diag(G.X) <- diag(G.Y) <- 0

# estimate the parameters of a Gaussian model
Y <- X \%*\% b + matrix(rnorm(100 * 10), 100)

## dont use affinity matrices and estimate lambda
fit <- cv.edgenet(
  X = X,
  Y = Y,
  family = gaussian,
  maxit = 1,
  lambda_range = c(0, 1)
)
## only provide one matrix and estimate lambda
fit <- cv.edgenet(
  X = X,
  Y = Y,
  G.X = G.X,
  psigx = 1,
  family = gaussian,
  maxit = 1,
  lambda_range = c(0, 1)
)
## estimate only lambda with two matrices
fit <- cv.edgenet(
  X = X,
  Y = Y,
  G.X = G.X,
  G.Y,
  psigx = 1,
  psigy = 1,
  family = gaussian,
  maxit = 1,
  lambda_range = c(0, 1)
)
## estimate only psigx
fit <- cv.edgenet(
  X = X,
  Y = Y,
  G.X = G.X,
  G.Y,
  lambda = 1,
  psigy = 1,
  family = gaussian,
  maxit = 1,
  psigx_range = c(0, 1)
)
## estimate all parameters
fit <- cv.edgenet(
  X = X,
  Y = Y,
  G.X = G.X,
  G.Y,
  family = gaussian,
  maxit = 1,
  lambda_range = c(0, 1),
  psigx_range = c(0, 1),
  psigy_range = c(0, 1)
)
## if Y is vectorial, we cannot use an affinity matrix for Y
fit <- cv.edgenet(
  X = X,
  Y = Y[, 1],
  G.X = G.X,
  family = gaussian,
  maxit = 1,
  lambda_range = c(0, 1),
  psigx_range = c(0, 1),
)
}
